{"version":3,"sources":["components/User/User.tsx","components/AddUserButton/AddUserButton.tsx","components/Users/Users.tsx","api/usersApi.ts","Redux/usersPageReducer.ts","components/AddNewUserForm/AddUserForm.tsx","components/common/Loading/Loading.js","components/Users/UsersContainer.tsx","App.tsx","serviceWorker.ts","Redux/store.tsx","index.tsx","components/common/Loading/loading.module.css"],"names":["useStyles","makeStyles","theme","createStyles","root","width","display","backgroundColor","palette","background","paper","header","grey","color","content","padding","avatar","teal","marginRight","User","props","firstName","lastName","email","index","classes","Card","className","CardHeader","title","CardContent","Avatar","aria-label","Typography","variant","align","height","minHeight","border","position","icon","top","left","transform","AddUserButton","onClick","fontSize","Users","users","addUser","Grid","container","spacing","alignItems","map","us","i","xs","item","key","instance","axios","create","baseURL","usersApi","get","response","user","post","SET_ERROR","SET_USERS","SET_LOADING","initialState","error","loading","setUsersSuccess","type","setLoading","setError","flexDirection","borderRadius","boxShadow","shadows","fields","AddNewUserForm","sendFormData","useState","setFirstName","setLastName","setEmail","changeFirstName","useCallback","e","currentTarget","value","changeLastName","changeEmail","autoComplete","onSubmit","gutterBottom","id","label","margin","onChange","name","validators","errorMessages","Button","size","Loading","styles","box","CircularProgress","UsersContainer","dispatch","useDispatch","useSelector","store","usersPage","isLoading","isNewUserForm","setNewUserForm","useEffect","a","data","success","addNewUser","getState","addNewUserData","showNewUserForm","handleClose","Container","maxWidth","style","Modal","open","onClose","aria-labelledby","aria-describedby","createMuiTheme","primary","App","ThemeProvider","Boolean","window","location","hostname","match","rootReducer","combineReducers","state","action","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.ba2d8d30.chunk.js","sourcesContent":["import React from 'react'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport { makeStyles, createStyles, Theme, Card, CardHeader, CardContent, Typography } from '@material-ui/core';\r\nimport {grey, teal } from '@material-ui/core/colors';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n      display: 'flex',\r\n      backgroundColor: theme.palette.background.paper\r\n    },\r\n    header: {\r\n      width: 80,\r\n      backgroundColor: grey[100],\r\n      color: grey[300],\r\n    },\r\n    content: {\r\n      display: 'flex',\r\n      padding: 24\r\n    },\r\n    avatar: {\r\n      backgroundColor: teal[500],\r\n      marginRight: 8\r\n    },\r\n  }),\r\n);\r\n\r\ntype userPropsType = {\r\n  firstName: string\r\n  lastName: string\r\n  email: string\r\n  _id: string\r\n  index: number\r\n}\r\n\r\n\r\nconst User: React.FC<userPropsType> = (props) => {\r\n\r\n  const { firstName, lastName, email, index } = props\r\n\r\n  const classes = useStyles()\r\n\r\n  return <>\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        className={classes.header}\r\n        title={`#${index + 1}`}\r\n      />\r\n      <CardContent className={classes.content}>\r\n        <Avatar aria-label=\"user\" className={classes.avatar}>\r\n          {firstName[0]}\r\n          {lastName[0]}\r\n        </Avatar>\r\n        <div>\r\n          <Typography variant=\"subtitle1\" align = 'left'>{firstName} {lastName}</Typography>\r\n          <Typography  variant=\"body1\" align = 'left' color='textSecondary'>{email}</Typography>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n\r\n  </>\r\n}\r\n\r\n\r\nexport default User","import React from 'react'\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { grey } from '@material-ui/core/colors';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: 400,\r\n            height: '100%',\r\n            minHeight: 100,\r\n            border: '3px dashed #e0e0e0',\r\n            color: grey[300],\r\n            position: 'relative'\r\n        },\r\n        icon: {\r\n            position: 'absolute',\r\n            top: `50%`,\r\n            left: `50%`,\r\n            transform: `translate(-50%, -50%)`\r\n        }\r\n    }),\r\n);\r\n\r\ntype AddUserButtonPropsType = {\r\n    onClick: () => void\r\n\r\n}\r\nconst AddUserButton: React.FC<AddUserButtonPropsType> = (props) => {\r\n    const classes = useStyles()\r\n\r\n    const { onClick } = props\r\n\r\n    return <div className={classes.root} onClick={onClick}>\r\n        <AddIcon fontSize='large' className={classes.icon} />\r\n    </div>\r\n}\r\n\r\nexport default AddUserButton","import React from 'react'\r\nimport User from '../User/User'\r\nimport AddUserButton from '../AddUserButton/AddUserButton'\r\nimport { Grid } from '@material-ui/core'\r\nimport {usersType } from '../../Redux/usersPageReducer'\r\n\r\ntype usersPropsType = {\r\n    addUser: () => void\r\n    users: usersType\r\n}\r\n\r\nconst Users: React.FC<usersPropsType> = (props) => {\r\n    const { users, addUser } = props\r\n  \r\n\r\n    return <>\r\n            <Grid container spacing={2}  alignItems=\"stretch\">\r\n                {users.map((us, i) => <Grid xs={3} item key={i}> <User index={i} {...us} /></Grid>)}\r\n                <Grid xs={3} item><AddUserButton onClick={addUser} /></Grid>\r\n            </Grid>\r\n    </>\r\n\r\n}\r\n\r\n\r\nexport default Users","import axios from \"axios\";\r\nimport { usersType } from \"../Redux/usersPageReducer\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://fierce-fortress-84655.herokuapp.com'\r\n\r\n});\r\n\r\ntype usersDataType = {\r\n    users: usersType\r\n    success: boolean\r\n}\r\n\r\ntype addUserDataType = {\r\n    success: boolean\r\n}\r\n\r\ntype getUsersDataType = usersDataType & { error: string }\r\n\r\nexport const usersApi = {\r\n    async getUsers() {\r\n        let response = await instance.get<getUsersDataType>('/users')\r\n        return response\r\n    },\r\n\r\n    async setNewUser(firstName: string, lastName: string, email: string) {\r\n        let user = { firstName, lastName, email }\r\n        let response = await instance.post<addUserDataType>('/users', { user: user })\r\n        return response\r\n    }\r\n\r\n\r\n}","import { Dispatch } from \"redux\";\r\nimport { AppStateType } from \"./store\";\r\nimport { usersApi } from \"../api/usersApi\";\r\n\r\nconst SET_ERROR = 'usersPageReducer/SET_ERROR'\r\nconst SET_USERS = 'usersPageReducer/SET_USERS'\r\nconst SET_LOADING = 'usersPageReducer/SET_LOADING'\r\n\r\n\r\nexport type userType = {\r\n  firstName: string\r\n  lastName: string\r\n  email: string\r\n  _id: string\r\n}\r\n\r\nexport type usersType = Array<userType>\r\n\r\n\r\nconst initialState = {\r\n  users: [] as usersType,\r\n  error: '',\r\n  loading: false\r\n}\r\n\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nexport const usersReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n  switch (action.type) {\r\n    case SET_USERS:\r\n      return {\r\n        ...state,\r\n        users: action.users\r\n      }\r\n    case SET_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: action.loading\r\n      }\r\n    case SET_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.error\r\n      }\r\n    default: return state\r\n  }\r\n}\r\n\r\ntype ActionType = setUsersActionType | setErrorActionType | setLoadingType\r\n\r\ntype setUsersActionType = {\r\n  type: typeof SET_USERS\r\n  users: usersType\r\n}\r\n\r\ntype setLoadingType = {\r\n  type: typeof SET_LOADING\r\n  loading: boolean\r\n}\r\n\r\ntype setErrorActionType = {\r\n  type: typeof SET_ERROR\r\n  error: string\r\n}\r\n\r\n// ******* ActionCreator *******\r\n\r\nconst setUsersSuccess = (users: usersType): setUsersActionType => ({ type: SET_USERS, users: users })\r\n\r\nconst setLoading = (loading: boolean): setLoadingType => ({ type: SET_LOADING, loading: loading })\r\n\r\nconst setError = (error: string): setErrorActionType => ({ type: SET_ERROR, error: error })\r\n\r\n\r\n// ******* ThunkCreator *******\r\n\r\nexport const setUsers = () => async (dispatch: Dispatch) => {\r\n  dispatch(setLoading(true))\r\n  try {\r\n    let response = await usersApi.getUsers()\r\n    if (response.data.success) {\r\n      dispatch(setUsersSuccess(response.data.users))\r\n    } else {\r\n      dispatch(setError('Some ERROR'))\r\n    }\r\n  } catch (error) {\r\n    dispatch(setError('Some ERROR'))\r\n  }\r\n  dispatch(setLoading(false))\r\n}\r\n\r\nexport const addNewUserData = (firstName: string, lastName: string, email: string) => async (dispatch: Dispatch, getState: () => AppStateType) => {\r\n  dispatch(setLoading(true))\r\n  try {\r\n    let response = await usersApi.setNewUser(firstName, lastName, email)\r\n    if (response.data.success) {\r\n      let response = await usersApi.getUsers()\r\n      dispatch(setUsersSuccess(response.data.users))\r\n    } else {\r\n      dispatch(setError('Some ERROR'))\r\n    }\r\n  } catch (error) {\r\n    dispatch(setError('Some ERROR'))\r\n  }\r\n  dispatch(setLoading(false))\r\n}\r\n\r\nexport const setErrorMessage = (error: string) => (dispatch: Dispatch) => {\r\n  dispatch(setError(error))\r\n}\r\n","import React, { useState, useCallback, ChangeEvent } from 'react'\r\nimport { makeStyles, Theme, createStyles, Button, Typography } from '@material-ui/core'\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: 400,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            borderRadius: 3,\r\n            position: 'absolute',\r\n            backgroundColor: theme.palette.background.paper,\r\n            boxShadow: theme.shadows[5],\r\n            padding: theme.spacing(2, 4, 3),\r\n            top: `50%`,\r\n            left: `50%`,\r\n            transform: `translate(-50%, -50%)`\r\n        },\r\n        fields: {\r\n            width: '100%'\r\n        }\r\n    }),\r\n);\r\n\r\n\r\ntype AddNewUserFormPropsType = {\r\n    sendFormData: (firstName: string, lastName: string, email: string,) => void\r\n\r\n}\r\n\r\nconst AddNewUserForm: React.FC<AddNewUserFormPropsType> = (props) => {\r\n    const { sendFormData } = props\r\n\r\n    const classes = useStyles()\r\n\r\n    const [firstName, setFirstName] = useState<string>('')\r\n    const [lastName, setLastName] = useState<string>('')\r\n    const [email, setEmail] = useState<string>('')\r\n\r\n    const changeFirstName = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setFirstName(e.currentTarget.value)\r\n    }, [setFirstName])\r\n\r\n\r\n\r\n    const changeLastName = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setLastName(e.currentTarget.value)\r\n    }, [setLastName])\r\n\r\n    const changeEmail = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    }, [setEmail])\r\n\r\n\r\n\r\n    const sendFieldsData = () => {\r\n        sendFormData(firstName, lastName, email)\r\n        setFirstName('')\r\n        setLastName('')\r\n        setEmail('')\r\n    }\r\n\r\n\r\n    return <>\r\n        <ValidatorForm className={classes.root} autoComplete=\"off\" onSubmit={sendFieldsData}>\r\n            <Typography variant=\"h6\" gutterBottom align='left' >Создание пользователя</Typography>\r\n            <TextValidator className={classes.fields}\r\n                id=\"outlined-basic\"\r\n                label=\"Имя\"\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                onChange={changeFirstName}\r\n                value={firstName} name=\"firstName\"\r\n                validators={['required']}\r\n                errorMessages={['Необходимо заполнить']} />\r\n            <TextValidator className={classes.fields}\r\n                id=\"outlined-basic\"\r\n                label=\"Фамилия\"\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                onChange={changeLastName}\r\n                value={lastName}\r\n                name=\"lastName\"\r\n                validators={['required']}\r\n                errorMessages={['Необходимо заполнить']} />\r\n            <TextValidator className={classes.fields}\r\n                id=\"outlined-basic\"\r\n                label=\"E-mail\"\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                onChange={changeEmail}\r\n                value={email}\r\n                name=\"email\"\r\n                validators={['required', 'isEmail']}\r\n                errorMessages={['Необходимо заполнить', 'Введите правильный Email']}\r\n            />\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"large\" >Создать</Button>\r\n\r\n        </ValidatorForm>\r\n    </>\r\n\r\n}\r\n\r\n\r\nexport default AddNewUserForm","import React from 'react';\r\nimport styles from './loading.module.css'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div className = {styles.box}>\r\n            <CircularProgress />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading\r\n","import React, { useEffect, useCallback, useState } from 'react'\r\nimport Users from './Users'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setUsers, addNewUserData } from '../../Redux/usersPageReducer'\r\nimport { Modal,Container} from '@material-ui/core'\r\nimport AddNewUserForm from '../AddNewUserForm/AddUserForm'\r\nimport { AppStateType } from '../../Redux/store'\r\nimport Loading from '../common/Loading/Loading'\r\n\r\n\r\ntype usersContainerPropsType = {\r\n\r\n}\r\n\r\nconst UsersContainer: React.FC<usersContainerPropsType> = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const users = useSelector((store: AppStateType) => store.usersPage.users)\r\n    const isLoading = useSelector((store: AppStateType) => store.usersPage.loading)\r\n\r\n    const [isNewUserForm, setNewUserForm] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        dispatch(setUsers())\r\n    }, [dispatch])\r\n      \r\n\r\n    const addNewUser = useCallback((firstName, lastName, email) => {\r\n        dispatch(addNewUserData(firstName, lastName, email))\r\n    }, [dispatch])\r\n\r\n    const showNewUserForm = useCallback(() => {\r\n        setNewUserForm(true)\r\n    }, [setNewUserForm])\r\n\r\n\r\n    const handleClose = useCallback(() => {\r\n        setNewUserForm(false)\r\n    }, [setNewUserForm])\r\n\r\n    \r\n    return <>\r\n      <Container maxWidth= {false} style={{ backgroundColor: '#f5f5f5', padding:60, minHeight: '100vh'}}>\r\n        <Modal\r\n            open={isNewUserForm}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"simple-modal-title\"\r\n            aria-describedby=\"simple-modal-description\">\r\n          {<><AddNewUserForm sendFormData={addNewUser} /></>}\r\n        </Modal>\r\n        {isLoading ? <Loading />\r\n        :<Users addUser={showNewUserForm} users = {users}/>}\r\n        \r\n      </Container>\r\n        \r\n    </>\r\n}\r\n\r\n\r\nexport default UsersContainer","import React from 'react';\nimport './App.css';\nimport UsersContainer from './components/Users/UsersContainer';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\nimport { teal } from '@material-ui/core/colors';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: teal\n  }\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <UsersContainer />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers, createStore, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { usersReducer } from \"./usersPageReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    usersPage: usersReducer  \r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)))\r\n\r\nexport default store;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './Redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n   <BrowserRouter>\n      <Provider store={store}>\n    <App />\n    </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"loading_box__1ruDY\"};"],"sourceRoot":""}